#+TITLE:	Lua RTT bindings (beta1)
#+AUTHOR:	Markus Klotzbuecher
#+EMAIL:	markus.klotzbuecher@mech.kuleuven.be
#+DATE:		2010-09-13 Mon
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:	en
#+OPTIONS:	H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:	TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT:	view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE:	<link rel="stylesheet" type="text/css" href="css/stylesheet.css" />

#+STARTUP:	showall
#+STARTUP:	hidestars

* Overview

  The RTT Lua bindings provide a slim but powerful interface to the
  RTT framework. It can be used for:

  - for building Lua based domain specific languages in the RTT
  - as a scriptable taskbrowser and deployer
  - for fast prototyping of components

  These bindings can be used in three different ways:

   1. As a *RTT enabled Lua interpreter*

      This is the easiest way to test a script and see if it works or
      for use as a scriptable deployer.

   2. As a *Lua component*

      A Lua component which offers two operations. The first for
      executing a given lua script and the second for executing a
      string with lua code.

   3. As a *RTT plugin*

      A /Lua Service/ can be loaded into a component and used e.g. for
      /intra-component/ coordination. It offers the same API as the
      Lua component.

* Setup
** Compilation

   - requires Lua-5.1 (debian: =liblua5.1-0-dev=, =liblua5.1-0=, =lua5.1=)

   - CMake options:
     - =
     -

** Runtime

    - setup =LUA_PATH= and =LUA_CPATH= so that the necessary modules
      are found. The former is for lua modules (.lua) and the later is
      for binary ones (.so). For example:

#+BEGIN_EXAMPLE
      $ export LUA_PATH=";;;/usr/share/lua/5.1/?.lua;\
	      /usr/share/lua/5.1/?/init.lua;\
	      /home/mk/src/git/orocos/ocl/lua/lua-modules/?.lua"
#+END_EXAMPLE

    - if using =rttlua= scripting: export correct =RTT_COMPONENT_PATH=
      variable, e.g.

#+BEGIN_EXAMPLE
      $ export RTT_COMPONENT_PATH=/home/mk/tmp/rtt-2.0/lib/orocos:home/mk/src/git/ocl/lua
#+END_EXAMPLE

* Quickstart

  Run the =rttlua= interpreter:

#+BEGIN_EXAMPLE
  ./rttlua
  Orocos RTTLua 1.0-beta1 (gnulinux)
  > -- print the TaskContext Lua is running in
  > print(TC)
  userdata: 0x1cba0b8
  > -- if we want nicer output we must load the rttlib module
  > require("modules/rttlib")
  > print(TC)
  TaskContext: lua
  state: PreOperational
  [...]
  > -- enable colors
  > rttlib.color=true
  > print(TC)
  > -- get deployer peer. Lua methods are called with ':' notation
  > d = TC:getPeer("deployer")
  > print(d)
  > instead of print you can just type '='
  > =d
  > -- call an operation
  > d:call("displayComponentTypes")
  I can create the following component types:
     OCL::LuaComponent
     OCL::Testcomp
  >

  -- todo
#+END_EXAMPLE

* Lua API

** Overview

   The Lua API consists of objects and free functions. The API naming
   mostly follows that RTT while simplifying where possible. All rtt
   related functions are stored in a global table called =rtt=. They
   are further subdivided as followed:

   - =TaskContext=
   - =SendHandle=
   - =Variable=
   - =InputPort= and =OutputPort=
   - =Property=
   - =Service=
   - =Operation=
   - =Logger=

  *Note*: the API consists of what was needed so far and what was easy
  to do. If something is missing which you need let us know. Chances
  are high that it is easy to add.

  Most of the API can be used in two ways: as functions and
  objects. The first uses the dot '.' syntax and takes the object as
  the first parameter. The second uses the ':' and will internally
  pass the object as a first parameter.

  For example the following two calls are equivalent:

#+BEGIN_EXAMPLE
  > print( rtt.TaskContext.getName(TC) )
  > print( TC:getName() )
#+END_EXAMPLE

  The flag column describes additonal properties of the
  function/method:
    - 'R': real-time safe
    - 'F' or 'M': only available as function or method

** =TaskContext=

   | Method                                           | flag | description                                                         |
   |--------------------------------------------------+------+---------------------------------------------------------------------|
   | =string getName()=                               |      | returns TaskContext name                                            |
   | =bool start()=                                   |      | start TaskContext                                                   |
   | =bool stop()=                                    |      | stop TaskContext                                                    |
   | =bool configure()=                               |      | configure TaskContext                                               |
   | =bool activate()=                                |      | activate TaskContext                                                |
   | =bool cleanup()=                                 |      | cleanup TaskContext                                                 |
   | =string getState()=                              |      | return string describing current state                              |
   | =table getPeers()=                               |      | return a table of all peers                                         |
   | =void addPeer(TaskContext)=                      |      | add a TaskContext as a peer                                         |
   | =void removePeer(string)=                        |      | remove a peer                                                       |
   | =TaskContext getPeer(string)=                    |      | get a peer                                                          |
   | =table getPortNames()=                           |      | return a table of port names                                        |
   | =void addPort(port)=                             |      | add a port to TaskContext                                           |
   | =void addEventPort(port)=                        |      | add a port as an event driven port                                  |
   | =Port getPort(string)=                           |      | get a port with given name                                          |
   | =addProperty(Property)=                          |      | add a property to TaskContext                                       |
   | =getProperty(string)=                            |      | get a property with the given name                                  |
   | =table getProperties()=                          |      | return all properties in a table                                    |
   | =table getOps()=                                 |      | return a table of Operation names                                   |
   | =string, number string, table getOpInfo(string)= |      | returns name, arity, description and table of argument descriptions |
   | =Service provides(...)=                          |      | return service (provides/0 default, provides/1 subservice)          |
   | =Variable call(string, ...)=                     |      | call operation with name specified by string and right arguments    |
   | =SendHandle send(string, ...)=                   |      | as above but send. returns SendHandle                               |
   | =void delete(TaskContext)=                       |      | explicit deletion of a TaskContext                                  |



** =SendHandle=

   An object returned by a TaskContext send() operation.

   | Method                           | flag | description                                              |
   |----------------------------------+------+----------------------------------------------------------|
   | =string, variable collect()=     |      | collect results of send, may block. string is SendStatus |
   | =string, variable collectIfDone= |      | as above, non blocking version                           |
   |                                  |      |                                                          |


** =Variable=

   Variable are the types know to the RTT. They consist of basic types
   (numeric, =string=, =char=, =bool=) and user defined types. The
   function =rtt.Variable.getTypes()= returns a table of these types:

#+BEGIN_EXAMPLE
   > print(table.concat(rtt.Variable.getTypes(), ', '))
   ConnPolicy, FlowStatus, PropertyBag, SendHandle, SendStatus, array, bool, char, double, float, int, rt_string, string, uint, void
#+END_EXAMPLE


   | Method                            | flag | description                                                                 |
   |-----------------------------------+------+-----------------------------------------------------------------------------|
   | =variable new(type)=              | F    | create a new Variable of type                                               |
   | =variable new(type, ival)=        | F    | create new Variable of type and initialize with ival (only for basic types) |
   | =luaval tolua()=                  |      | convert to lua value (only for basic types)                                 |
   | =table getTypes()=                | F    | return a list of types know to the RTT                                      |
   | =string getType()=                |      | return the RTT type name in human readable format                           |
   | =string getTypeName()=            |      | return the RTT type name                                                    |
   | =table getMemberNames()=          |      | return a table of the names of subtypes of this variable                    |
   | =variable getMember(name)=        |      | return variable which is a member with name                                 |
   | =opBinary(string_op, var1, var2)= | F    | execute: var1 string_op var2                                                |
   | =bool assign(value)=              |      | assign value which can be a lua type or a Variable                          |
   |                                   |      |                                                                             |

   - the unary operator =-= and the binary operators =+=, =-=, =*=,
     =/= =%=, =^=, and the comparison operators '==', '<=', '>=' are
     supported. See the [[#ComparisonIssue][warning]] on comparing Variables with
     corresponding Lua types.

   - indexing and assigment

     Variables with members can be index and assigned. See the
     following example:

#+BEGIN_EXAMPLE
     > cp = rtt.Variable.new("ConnPolicy")
     > print(cp)
     {data_size=0,type=0,name_id="",init=false,pull=false,transport=0,lock_policy=2,size=0}
     > print(cp.data_size)
     0
     > cp.data_size = 4711
     > print(cp.data_size)
     4711
#+END_EXAMPLE


** =InputPort= and =OutputPort=

   InputPort

   | Method                    | flag | description                                                                  |
   |---------------------------+------+------------------------------------------------------------------------------|
   | =new(type)=               |      | create a new InputPort of type                                               |
   | =string, variable read()= |      | read from Port, returns a FlowStatus string and if data available a Variable |
   | =string read(variable)=   |      | read from Port and write result into Variable given. Returns FlowStatus      |
   | =table info()=            |      | return a table containing information about this port                        |

   OuputPort

   | Method            | flag | description                                           |
   |-------------------+------+-------------------------------------------------------|
   | =new(type)=       |      | create a new OutputPort of type                       |
   | =write(Variable)= |      | write Variable to port                                |
   | =table info()=    |      | return a table containing information about this port |


** =Property=

   | Method                    | flag | description                                     |
   |---------------------------+------+-------------------------------------------------|
   | =new(type)=               |      | create a new Property                           |
   | =Variable get()=          |      | return the Variable contained in this Property  |
   | =bool set(Variable)=      |      | set the Property to the value in given Variable |
   | =string getName()=        |      | return the name of the property                 |
   | =string getDescription()= |      | return the description of the property          |

** Service Interface

*** =Service=

   | Method                     | flag | description                          |
   |----------------------------+------+--------------------------------------|
   | =string getName()=         |      | return Name of Service               |
   | =string doc()=             |      | return documentation of this service |
   | =table getProviderNames()= |      | return table of subservice names     |
   | getOperationNames          |      |                                      |
   | getPortNames               |      |                                      |
   | provides                   |      |                                      |
   | getOperation               |      |                                      |
   | getPort                    |      |                                      |

*** =ServiceRequester=

   | Method            | flag | description |
   |-------------------+------+-------------|
   | getRequestName    |      |             |
   | getRequesterNames |      |             |
   | ready             |      |             |
   | disconnect        |      |             |
   | requires          |      |             |

*** =Operation=

   | Method | flag | description |
   |--------+------+-------------|
   | info   |      |             |
   | call   |      |             |
   | send   |      |             |


** miscellaneous

*** =Logger=

*** =alloc=

* Real-Time

* The =rttlib= convenience module
  This library adds some pretty printing functions to the standard
  objects. It is recommended to load it for all applications by adding
  the following to scripts:

  =require("rttlib")=

** how to add a pretty printer for a custom type

   In short: write a function which accepts a lua table representation
   of you data type and returns either a table or a string. Assign it
   to =rttlib.pp_var.mytype=, where mytype is the value returned by
   the =var:getType()= method. That's all!

   *Quick example:* =ConnPolicy= type

   (This is just an example. It has been done for this type already).

   If you run it without loading =rttlib= printing a =ConnPolicy= will
   look like this:

   #+BEGIN_EXAMPLE
   ./rttlua
   Orocos RTTLua 1.0-beta1 (gnulinux)
   > return var.new("ConnPolicy")
   {data_size=0,type=0,name_id="",init=false,pull=false,transport=0,lock_policy=2,size=0}
   #+END_EXAMPLE

   This not too bad, but we would like to display the string
   representation of the C++ enums =type= and =lock_policy=. So we
   write a function...

   #+BEGIN_EXAMPLE
   function ConnPolicy2tab(cp)
       if cp.type == 0 then cp.type = "DATA"
       elseif cp.type == 1 then cp.type = "BUFFER"
       else cp.type = tostring(cp.type) .. " (invalid!)" end

       if cp.lock_policy == 0 then cp.lock_policy = "UNSYNC"
       elseif cp.lock_policy == 1 then cp.lock_policy = "LOCKED"
       elseif cp.lock_policy == 2 then cp.lock_policy = "LOCK_FREE"
       else cp.lock_policy = tostring(cp.lock_policy) .. " (invalid!)" end
       return cp
   end
   #+END_EXAMPLE

   and add it to the =rttlib.var_pp= table of Variable formatters:

   #+BEGIN_EXAMPLE
   rttlib.var_pp.ConnPolicy = ConnPolicy2tab
   #+END_EXAMPLE

   now printing a =ConnPolicy= again calls our function and prints the
   desired fields:

   #+BEGIN_EXAMPLE
   > return var.new("ConnPolicy")
   {data_size=0,type="DATA",name_id="",init=false,pull=false,transport=0,lock_policy="LOCK_FREE",size=0}
   >
   #+END_EXAMPLE

* Tips and tricks
** rttlua init file =~/.rttlua=

   =rttlua= will look for a file =.rttlua= in your home directory and
   if found execute it. It can be used for doing initalization
   (e.g. loading =rttlib= etc.)

** Understanding functions vs. methods

   Methods and functions are essentially the same in Lua. RTTLua most
   of the time supports both ways of calling.

   Calling the function =call= which is stored in the table
   =rtt.TaskContext=. The TaskContext object is the first parameter.

#+BEGIN_EXAMPLE
   > return rtt.TaskContext.call(TC, "getPeriod")
#+END_EXAMPLE

   Calling as a method can be done with the =:= syntax. Lua will
   automatically pass the entity before the colon as the first
   parameter:

#+BEGIN_EXAMPLE
   > return TC:call("setPeriod", 1.1)
#+END_EXAMPLE

* Known issues

** Assignment is not like RTT scripting

   Except for the Lua primitive types (string, number, boolean) Lua
   works with references. So assignment between RTT Variables and Lua
   types might not do what you expect:

#+BEGIN_EXAMPLE
   > s=rtt.Variable.new("string", "hello world")
   > print(s)
   hello world
   > =type(s)
   userdata
   > =s:getType()
   string
   > s = "a new string" -- carful! now its a Lua string, the former Variable will be garbage collected.
   > =type(s)
   string
   > s:getType()
   stdin:1: attempt to call method 'getType' (a nil value)
   stack traceback:
   stdin:1: in main chunk
#+END_EXAMPLE

** Not all types are garbage collected
** Comparing Lua types and RTT Variables fails
   :PROPERTIES:
   :CUSTOM_ID: ComparisonIssue
   :END:

   Comparison of equivalent Lua and RTT Variable types is does *not*
   work. You can only compare entities of the _same_ type:

     #+BEGIN_EXAMPLE
     -- lua with lua works:
     > ="just a string" == "just a string"
     true
     -- and rtt.Variable with rtt.Variable too...
     > return rtt.Variable.new("string", "just a string") == rtt.Variable.new("string", "just a string")
     true
     -- but unfortunately not a mixture of both:
     > return "just a string" == rtt.Variable.new("string", "just a string")
     false
     #+END_EXAMPLE

   - It is currently not possible to call or send a connected local
     required Operation.


* Todo

  - Support for creating Operations from Lua (probably not soon)

  - Calling a Connected Required Operation is not possible from Lua
    right now.

* License

  The Lua-RTT bindings are licensed under the LGPL.

* Links
  - [[http://www.lua.org/][The Lua website]]
  - [[http://www.lua.org/pil/][Programming in Lua]] book (older version, but the basics are mostly the same)
  - [[http://www.lua.org/manual/5.1/][The Lua-5.1 Reference Manual]]
  - [[http://thomaslauer.com/download/luarefv51.pdf][Lua Cheatsheet]]
