#! /usr/bin/env python
# encoding: utf-8

def build(bld):
	# 1. A simple program
 	obj = bld.createObj('cpp', 'program')
 	obj.source='''
 	main.cpp
 	'''
 	obj.includes='.'
 	obj.useliblocal='./orocos-taskbrowser.a'
 	obj.uselib='OROCOS'
 	obj.target='task-test'

# 	obj = bld.createObj('docbook', 'pdf')
# 	obj.source='''
# 	doc/orocos-taskbrowser.xml
# 	'''
# 	obj.target='doc/orocos-taskbrowser.pdf'

# 	obj = bld.createObj('docbook', 'html')
# 	obj.source='''
# 	doc/orocos-taskbrowser.xml
# 	'''
# 	obj.target='doc/orocos-taskbrowser.html'
	
	# 2. A shared library
	# The extension (.so) is added automatically
# 	obj = bld.createObj('cpp', 'shlib')
# 	obj.source='''
# 	TaskBrowser.cxx
# 	'''
# 	obj.includes='.'
# 	obj.uselib='OROCOS'
# 	obj.target='orocos-taskbrowser'

	# 3. A static library
	# The extension (.a) is added automatically
	obj = bld.createObj('cpp', 'staticlib')
	obj.source='''
	TaskBrowser.cxx
	'''
	obj.uselib='OROCOS'
	obj.includes='.'
	obj.target='orocos-taskbrowser'

def set_options(opt):
	# options defined if src/ was to be compiled as a standalone module
	print 'ok'


def configure(conf):
	print 'ok'


