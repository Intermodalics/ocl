StateMachine Default
{

  var bool calibrate_offsets     = true
  var bool move_to               = true

  const double pi = 3.14159265358979

  initial state StartRobotState {
    entry {
      do Robot.prepareForUse()
    }
    exit {
      do Robot.unlockAllAxes()
      do Robot.startAllAxes()
    }
    transitions {
      select CalibrateOffsetsState
    }
  }



  state CalibrateOffsetsState {
    preconditions {
      if (calibrate_offsets == false) then
        select MoveToState
    }
    entry {
      do nAxesGeneratorPos.start()
      do nAxesControllerPos.start()
      do CalibrateOffsetsProg.start()
    }
    exit {
      do nAxesGeneratorPos.stop()
      do nAxesControllerPos.stop()
    }
    transitions {
      if !CalibrateOffsetsProg.isRunning then
       select MoveToState
    }
  }      

  state MoveToState {
    preconditions {
      if (move_to == false) then
        select StopRobotState
    }
    entry {
      do nAxesGeneratorVel.start()
      do nAxesControllerVel.start() 
      //do nAxesGeneratorPos.start()
      //do nAxesControllerPosVel.start() 
      do Reporting.start()

        do nAxesGeneratorVel.applyVelocity(4, 0.1 ,7.0)
        do nAxesGeneratorVel.applyVelocity(4, -0.1,7.0)
        do nAxesGeneratorVel.applyVelocity(4, 0.0,2.0)
        do nAxesGeneratorVel.applyVelocity(4, 0.2 ,7.0)
        do nAxesGeneratorVel.applyVelocity(4, -0.2 ,7.0)
        do nAxesGeneratorVel.applyVelocity(4, 0.0 ,2.0)
        do nAxesGeneratorVel.applyVelocity(4, 0.4 ,7.0)
        do nAxesGeneratorVel.applyVelocity(4, -0.4 ,7.0)
        do nAxesGeneratorVel.applyVelocity(4, 0.0 ,2.0)
        do nAxesGeneratorVel.applyVelocity(4, 0.8 ,7.0)
        do nAxesGeneratorVel.applyVelocity(4, -0.8 ,7.0)
        do nAxesGeneratorVel.applyVelocity(4, 0.0 ,2.0)

    }
    exit {
	 //do nAxesControllerPosVel.stop()
	 do nAxesControllerVel.stop()
	 //do nAxesGeneratorPosVel.stop()
	 do nAxesGeneratorVel.stop()
	 do Reporting.stop()
    }
    transitions {
      select StopRobotState
    }
  }


  final state StopRobotState {
    entry {
      do Robot.stopAllAxes()
      do Robot.lockAllAxes()
    }
    exit {
      do Robot.prepareForShutdown()
    }
  }
}

RootMachine Default Default
