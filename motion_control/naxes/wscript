#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006 (ita)

def build(bld):
	# 1. A simple program
	obj = bld.createObj('cpp', 'program')
	obj.source='''
	main.cpp
	'''
	#obj.includes='.'
	obj.useliblocal='./orocos-naxes.a ../../hardware/kuka/orocos-kuka160.a ../../taskbrowser/orocos-taskbrowser.a ../../reporting/orocos-reporting.a'
	obj.uselib='OROCOS'
	obj.target='naxes-test'

	# 2. A shared library
	# The extension (.so) is added automatically
# 	obj = bld.createObj('cpp', 'shlib')
# 	obj.source='''
# 	ReportingComponent.cxx
# 	'''
# 	obj.includes='src /usr/local/orocos/include'
# 	obj.target='orocos-reporting'

	# 3. A static library
	# The extension (.a) is added automatically
	obj = bld.createObj('cpp', 'staticlib')
	obj.source='''
	nAxesSensorPos.cpp
	nAxesGeneratorPos.cpp
	nAxesGeneratorVel.cpp
	nAxesControllerPos.cpp
	nAxesControllerPosVel.cpp
	nAxesControllerVel.cpp
	nAxesEffectorVel.cpp
	main.cpp
	'''
	obj.uselib='OROCOS'
	obj.target='orocos-naxes'

def set_options(opt):
	# options defined if src/ was to be compiled as a standalone module
	print 'ok'


def configure(conf):
	print 'ok'


