#! /usr/bin/env python
# encoding: utf-8
# Thomas Nagy, 2006 (ita)

import Params

def build(bld):
	opencv = Params.g_options.opencv
	if bool(opencv):
		# 1. A simple program
		obj = bld.createObj('cpp', 'program')
		obj.source='''
		main.cpp
		'''
		#obj.includes='.'
		obj.useliblocal='./orocos-camera.a ../../taskbrowser/orocos-taskbrowser.a ../../reporting/orocos-reporting.a'
		obj.uselib='OROCOS OPENCV GTK GTHREAD DC1394'
		obj.target='camera-test'

		# 2. A shared library
		# The extension (.so) is added automatically
		# 	obj = bld.createObj('cpp', 'shlib')
		# 	obj.source='''
		# 	ReportingComponent.cxx
		# 	'''
		# 	obj.includes='src /usr/local/orocos/include'
		# 	obj.target='orocos-reporting'

		# 3. A static library
		# The extension (.a) is added automatically
		obj = bld.createObj('cpp', 'staticlib')
		obj.source='''
		CaptureCamera.cpp
		'''
		obj.uselib='OROCOS'
		obj.target='orocos-camera'

def set_options(opt):
	# options defined if src/ was to be compiled as a standalone module
	opt.add_option('--enable-opencv',action='store_true',help='Enable OpenCv',dest='opencv')
	opt.add_option('--with-opencv',type='string',help='location of Opencv',dest='opencvloc',default='')

def configure(conf):
	opencv = Params.g_options.opencv
	opencvloc = Params.g_options.opencvloc

	if bool(opencv)|bool(opencvloc):
		pth = ''
		if opencvloc != '':
			pth = opencvloc+'/lib/pkgconfig'
		if conf.checkPkg('opencv','OPENCV','0.9.6',pth):
			conf.checkPkg('gtk+-2.0','GTK')
			conf.checkPkg('gthread-2.0','GTHREAD')
			conf.env['LIB_OPENCV'].append( 'dc1394_control')
			conf.env['LIB_OPENCV'].append( 'raw1394')
			conf.env['LIB_OPENCV'].append( 'jpeg')
		else:
			Params.fatal("Opencv pkgconf file not found ! hardware/camera will not be available")
		
