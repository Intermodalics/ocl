<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % oro_ents SYSTEM "http://people.mech.kuleuven.be/~psoetens/orocos/doc/orocos.ent" >
%oro_ents;
]
>

<article>
  <articleinfo>
    <title>The Orocos Hardware IO Component</title>
    <authorgroup>
      <author>
        <firstname>Peter</firstname>
        <surname>Soetens</surname>
        <affiliation>
          <orgname>K.U.Leuven</orgname>          <address><country>Belgium</country></address>
        </affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>2002-2006</year>
      <holder>Peter.Soetens@mech.kuleuven.be</holder>
      <holder>Herman.Bruyninckx@mech.kuleuven.be</holder>
    </copyright>

    <abstract>
      <para>
	This document explains the design and implementation of the
	hardware IO component.
      </para>
    </abstract>

    <legalnotice>
      <para>
	Permission is granted to copy, distribute and/or modify this
	document under the terms of the GNU Free Documentation
	License, Version 1.1 or any later version published by the
	Free Software Foundation, with no Invariant Sections, with no
	Front-Cover Texts, and with no Back-Cover Texts. A copy of
	this license can be found at <ulink
	  url="http://www.fsf.org/copyleft/fdl.html">http://www.fsf.org/copyleft/fdl.html</ulink>.
      </para>
    </legalnotice>
  </articleinfo>
  <section>
    <title>Introduction</title>
    <para>
      This component depends on the interfaces defined in the 
      Orocos Device Interface. The Comedi package provides an
      support for adding comedi devices to this component.
    </para>
  </section>
  <section id="generic-sens-eff">
    <title>Hardware Abstraction</title>
    <para>
      This section explains how hardware sensors and outputs
      are abstracted using these Components in Orocos. 
      They allow to do a quick test of
      existing device drivers, accessing them from a 
      Component. They are not aimed to a specific
      application and the signals are propagated in
      data channels or through an object-per-sensor way.
    </para>
    <section>
      <title>Creating an IO Component</title>
      <para>
	The <classname>Orocos::IOComponent</classname> is created like all
	the other components in the Orocos framework :
	<programlisting>  IOComponent   io(IN_CHANS, OUT_CHANS, "IOName");
	</programlisting>
	Where IN_CHANS is the maximal number of input channels
	and OUT_CHANS is the maximal number of output channels
	this componentexposes (see later). The last parameter
	is the unique name of this component instance.
      </para>
    </section>
    <section>
      <title>Sensing : Sensor Hardware Abstraction</title>
      <para>
	The IO Component knows two fundamental
	types of sensors : Analog Inputs and Digital Inputs.
	Multichannel Analog and Digital input cards are defined
	in the Orocos Device Interface.
      </para>
      <para>
	The component provides methods to add Analog and
	Digital Inputs.
      </para>
      <section>
	<title>Adding and Removing an Analog Input</title>
	<para>
	  An unlimited number of Analog Inputs can be added
	  to the IOComponent :
	  <programlisting>
  int A_CHANNEL_1 = 1;
  io.addAnalogInput("AIn_1", analog_input_card, A_CHANNEL_1 );
	  </programlisting>
	  This methods creates a DataPort&lt;double&gt; object
	  with the name "AIn_1" from which other components may read.
	  It's value is updated from an analog_input_card on channel A_CHANNEL_1.
	  The analog_input_card must implement the <classname>
	  RTT::AnalogInInterface</classname>.
	  If there is already an "AIn_1" DataObject, addAnalogInput
	  returns false.
	</para>
	<para>
	  The <classname>RTT::AnalogInput</classname> can also be read from an Orocos
	  Program Script or State Description :
	  <programlisting>
  var double result = IOComponent.AIn_1.Get()
  var int    raw_result = IOComponent.AIn_1_raw.Get()
	  </programlisting>
	</para>
	<para>
	  It can be removed with the following method call :
	  <programlisting>
  io.removeAnalogInput("AIn_1");
	  </programlisting>
	  Which removes the "AIn_1" Port from the interface.
	</para>
      </section>
      <section>
	<title>Using Virtual Channels</title>
	<para>
	  Analog inputs can be ordered in a virtual channels DataPort.
	  This allows a more generic way of reading inputs
	  from other components. The Channel Port which is
	  created is of the type
	  <classname>DataPort&lt; std::vector&lt;double&gt; &gt;</classname>
	  and has the name "InputValues". AnalogInputs
	  can be added to a channel in this vector :
	  <programlisting>
  int A_VIRT_CHAN = 1;
  int A_CHANNEL   = 5;
  io.addChannel(A_VIRT_CHAN, analog_input_card, A_CHANNEL );
	  </programlisting>
	  Which demonstrates that channel 5 of the <classname>RTT::AnalogInInterface</classname>
	  is inserted in position 1 of the Channel DataObject. If this
	  channel was already taken, addChannel returns false;
	</para>
	<para>
	  Removing a virtual channel is quite straightforward :
	  <programlisting>
  io.removeChannel( A_VIRT_CHAN );
	  </programlisting>
	</para>
      </section>
      <section>
	<title>Adding Digital Inputs</title>
	<para>
	  Digital Inputs are available through the method interface.
	</para>
	<para>
	  A <classname>RTT::DigitalInput</classname> is added as such :
	  <programlisting>
  int D_CHANNEL = 2;
  io.addDigitalInput("DIn_1", digital_input_card, D_CHANNEL );
	  </programlisting>
	  Which is very similar to adding an Analog Input. The IOComponent
	  exposes this Input through the methods :
	  <programlisting>
  bool result = io.isOn("DIn_1");
	  </programlisting>
	  Or in a program or state script :
	  <programlisting>
  var bool result = IOComponent.isOn("DIn_1")
	  </programlisting>
	</para>
      </section>
    </section>
    <section>
      <title>Steering : Effector Hardware Abstraction</title>
      <para>
	The <classname>Orocos::IOComponent</classname>
	support sending signals to hardware as well.
      </para>
      <section>
	<title>Adding and Removing Analog Outputs</title>
	<para> Analogous to Analog inputs :
	  <programlisting>
  int A_CHANNEL_1 = 1;
  io.addAnalogOutput("AOut_1", analog_output_card, A_CHANNEL_1 );
	  </programlisting>
	  This methods <emphasis>creates</emphasis>
	  a DataPort&lt;double&gt; object
	  with the name "AOut_1".
	  The analog_output_card must implement the <classname>
	  RTT::AnalogOutInterface</classname>.
	  If there is already an "AOut_1" DataPort, addAnalogOutput
	  returns false.
	</para>
	<para>
	  The <classname>RTT::AnalogOutput</classname> can then be read from an Orocos
	  Program Script or State Machine :
	  <programlisting>
  var double result = IOComponent.AOut_1.Get()
  var int    raw_result = IOComponent.AOut_1_raw.Get()
	  </programlisting>
	</para>
	<para>
	  An AnalogOutput can be removed with the following method call :
	  <programlisting>
  io.removeAnalogOutput("AOut_1");
	  </programlisting>
	  This removes the AOut_1 DataPort as well.
	</para>
      </section>
      <section>
	<title>Using Virtual Channels</title>
	<para>
	  Analog Outputs can be read from a virtual channels DataPort.
	  The IOComponent <emphasis>creates</emphasis> a
	  <classname>DataPort&lt; std::vector&lt;double&gt; &gt;</classname>
	  with the name "OutputValues" to which other components can connect
	  their WriteDataPorts.
	  Analog Outputs can be read from this vector :
	  <programlisting>
  int A_VIRT_CHAN = 1;
  int A_CHANNEL   = 5;
  io.addChannel(A_VIRT_CHAN, analog_output_card, A_CHANNEL );
	  </programlisting>
	  Which demonstrates that channel 5 of the <classname>RTT::AnalogOutInterface</classname>
	  is set to the value of virtual channel 1.
	  If this virtual 
	  channel was already taken, addChannel returns false;
	</para>
	<para>
	  Removing a virtual channel is again quite straightforward :
	  <programlisting>
  io.removeChannel( A_VIRT_CHAN );
	  </programlisting>
	</para>
      </section>
      <section>
	<title>Adding Digital Outputs</title>
	<para>
	  Digital Outputs are not read from Ports, as digital
	  signals are set by methods.
	</para>
	<para>
	  A Digital Output is added as such :
	  <programlisting>
  int D_CHANNEL = 2;
  io.addDigitalOutput("DOut_1", digital_output_card, D_CHANNEL );
	  </programlisting>
	  Which is again analogous to adding digital inputs. The IOComponent
	  exposes this Output through the methods :
	  <programlisting>
  io.switchOn("DOut_1");
  bool result = io.isOn("DOut_1");
  io.switchOff("DOut_1");
	  </programlisting>
	  Or in a program or state script :
	  <programlisting>
  do IOComponent.switchOn("DOut_1")
  var bool result = IOComponent.isOn("DOut_1")
  do IOComponent.switchOff("DOut_1")
	  </programlisting>
	</para>
      </section>
    </section>
  </section>
</article>
